version: "3.7"

services:
   
  # proxy:
  #   image: traefik:v2.5
  #   networks:
  #     - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
  #     - default
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   command:
  #     # Enable Docker in Traefik, so that it reads labels from Docker services
  #     - --providers.docker
  #     # Add a constraint to only use services with the label for this stack
  #     # from the env var TRAEFIK_TAG
  #     - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
  #     # Do not expose all Docker services, only the ones explicitly exposed
  #     - --providers.docker.exposedbydefault=false
  #     # Enable Docker Swarm mode
  #     - --providers.docker.swarmmode
  #     # Enable the access log, with HTTP requests
  #     - --accesslog
  #     # Enable the Traefik log, for configurations and errors
  #     - --log
  #     # Enable the Dashboard and API
  #     - --api
  #   deploy:
  #     placement:
  #       constraints:
  #         - node.role == manager
  #     labels:
  #       # Enable Traefik for this service, to make it available in the public network
  #       - traefik.enable=true
  #       # Use the traefik-public network (declared below)
  #       - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
  #       # Use the custom label "traefik.constraint-label=traefik-public"
  #       # This public Traefik will only use services with this label
  #       - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
  #       # traefik-http set up only to use the middleware to redirect to https
  #       - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.scheme=https
  #       - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.permanent=true
  #       # Handle host with and without "www" to redirect to only one of them
  #       # Uses environment variable DOMAIN
  #       # To disable www redirection remove the Host() you want to discard, here and
  #       # below for HTTPS
  #       - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
  #       - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.entrypoints=http
  #       # traefik-https the actual router using HTTPS
  #       - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
  #       - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.entrypoints=https
  #       - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls=true
  #       # Use the "le" (Let's Encrypt) resolver created below
  #       - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls.certresolver=le
  #       # Define the port inside of the Docker service to use
  #       - traefik.http.services.${STACK_NAME?Variable not set}-proxy.loadbalancer.server.port=80
  #       # Handle domain with and without "www" to redirect to only one
  #       # To disable www redirection remove the next line
  #       - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.regex=^https?://(www.)?(${DOMAIN?Variable not set})/(.*)
  #       # Redirect a domain with www to non-www
  #       # To disable it remove the next line
  #       - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.replacement=https://${DOMAIN?Variable not set}/$${3}
  #       # Redirect a domain without www to www
  #       # To enable it remove the previous line and uncomment the next
  #       # - traefik.http.middlewares.${STACK_NAME}-www-redirect.redirectregex.replacement=https://www.${DOMAIN}/$${3}
  #       # Middleware to redirect www, to disable it remove the next line 
  #       - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.middlewares=${STACK_NAME?Variable not set}-www-redirect
  #       # Middleware to redirect www, and redirect HTTP to HTTPS
  #       # to disable www redirection remove the section: ${STACK_NAME?Variable not set}-www-redirect,
  #       - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.middlewares=${STACK_NAME?Variable not set}-www-redirect,${STACK_NAME?Variable not set}-https-redirect




#   db:
#     image: postgres:13.4
#     expose:
#       - 5432
#     environment:
#       PGDATA: /var/lib/postgresql/data/pgdata
#       POSTGRES_DB: punk_events
#       POSTGRES_USER: habrpguser
#       POSTGRES_PASSWORD: pgpwd4habr
#     volumes:
#       - ./pg_data:/var/lib/postgresql/data/pgdata    
# #    env_file:
# #      - .env
#     restart: always
#     networks:
#       - punk_events_network
#     # deploy:
#       # placement:
#         # constraints:
#           # - node.labels.${STACK_NAME?Variable not set}.app-db-data == true

  

  backend:
    image: kondrahin/punk-events:latest
    ports:
      - 8000:8000
    depends_on:
      - db
    env_file:
      - .env
    networks:
      - punkeventsnetwork
    
  db:
    image: postgres:13.4-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./backend/scripts/pg-init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    env_file:
      - .env
    networks:
      - punkeventsnetwork

  redis:
    image: redis:6.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/var/lib/redis
      - redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - punkeventsnetwork

volumes:
  postgres_data:
  redis-data:
  redis.conf:

networks:
    punkeventsnetwork:
        driver: bridge
